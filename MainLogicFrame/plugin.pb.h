// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: plugin.proto

#ifndef PROTOBUF_plugin_2eproto__INCLUDED
#define PROTOBUF_plugin_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3005001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace protobuf_plugin_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[3];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
void InitDefaultsplugins_childpluginImpl();
void InitDefaultsplugins_childplugin();
void InitDefaultspluginsImpl();
void InitDefaultsplugins();
void InitDefaultsAllpluginsImpl();
void InitDefaultsAllplugins();
inline void InitDefaults() {
  InitDefaultsplugins_childplugin();
  InitDefaultsplugins();
  InitDefaultsAllplugins();
}
}  // namespace protobuf_plugin_2eproto
class Allplugins;
class AllpluginsDefaultTypeInternal;
extern AllpluginsDefaultTypeInternal _Allplugins_default_instance_;
class plugins;
class pluginsDefaultTypeInternal;
extern pluginsDefaultTypeInternal _plugins_default_instance_;
class plugins_childplugin;
class plugins_childpluginDefaultTypeInternal;
extern plugins_childpluginDefaultTypeInternal _plugins_childplugin_default_instance_;

// ===================================================================

class plugins_childplugin : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:plugins.childplugin) */ {
 public:
  plugins_childplugin();
  virtual ~plugins_childplugin();

  plugins_childplugin(const plugins_childplugin& from);

  inline plugins_childplugin& operator=(const plugins_childplugin& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  plugins_childplugin(plugins_childplugin&& from) noexcept
    : plugins_childplugin() {
    *this = ::std::move(from);
  }

  inline plugins_childplugin& operator=(plugins_childplugin&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const plugins_childplugin& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const plugins_childplugin* internal_default_instance() {
    return reinterpret_cast<const plugins_childplugin*>(
               &_plugins_childplugin_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    0;

  void Swap(plugins_childplugin* other);
  friend void swap(plugins_childplugin& a, plugins_childplugin& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline plugins_childplugin* New() const PROTOBUF_FINAL { return New(NULL); }

  plugins_childplugin* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const plugins_childplugin& from);
  void MergeFrom(const plugins_childplugin& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(plugins_childplugin* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bytes childname = 1;
  void clear_childname();
  static const int kChildnameFieldNumber = 1;
  const ::std::string& childname() const;
  void set_childname(const ::std::string& value);
  #if LANG_CXX11
  void set_childname(::std::string&& value);
  #endif
  void set_childname(const char* value);
  void set_childname(const void* value, size_t size);
  ::std::string* mutable_childname();
  ::std::string* release_childname();
  void set_allocated_childname(::std::string* childname);

  // bytes location = 2;
  void clear_location();
  static const int kLocationFieldNumber = 2;
  const ::std::string& location() const;
  void set_location(const ::std::string& value);
  #if LANG_CXX11
  void set_location(::std::string&& value);
  #endif
  void set_location(const char* value);
  void set_location(const void* value, size_t size);
  ::std::string* mutable_location();
  ::std::string* release_location();
  void set_allocated_location(::std::string* location);

  // bytes title = 3;
  void clear_title();
  static const int kTitleFieldNumber = 3;
  const ::std::string& title() const;
  void set_title(const ::std::string& value);
  #if LANG_CXX11
  void set_title(::std::string&& value);
  #endif
  void set_title(const char* value);
  void set_title(const void* value, size_t size);
  ::std::string* mutable_title();
  ::std::string* release_title();
  void set_allocated_title(::std::string* title);

  // @@protoc_insertion_point(class_scope:plugins.childplugin)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr childname_;
  ::google::protobuf::internal::ArenaStringPtr location_;
  ::google::protobuf::internal::ArenaStringPtr title_;
  mutable int _cached_size_;
  friend struct ::protobuf_plugin_2eproto::TableStruct;
  friend void ::protobuf_plugin_2eproto::InitDefaultsplugins_childpluginImpl();
};
// -------------------------------------------------------------------

class plugins : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:plugins) */ {
 public:
  plugins();
  virtual ~plugins();

  plugins(const plugins& from);

  inline plugins& operator=(const plugins& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  plugins(plugins&& from) noexcept
    : plugins() {
    *this = ::std::move(from);
  }

  inline plugins& operator=(plugins&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const plugins& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const plugins* internal_default_instance() {
    return reinterpret_cast<const plugins*>(
               &_plugins_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    1;

  void Swap(plugins* other);
  friend void swap(plugins& a, plugins& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline plugins* New() const PROTOBUF_FINAL { return New(NULL); }

  plugins* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const plugins& from);
  void MergeFrom(const plugins& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(plugins* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef plugins_childplugin childplugin;

  // accessors -------------------------------------------------------

  // repeated .plugins.childplugin child = 9;
  int child_size() const;
  void clear_child();
  static const int kChildFieldNumber = 9;
  const ::plugins_childplugin& child(int index) const;
  ::plugins_childplugin* mutable_child(int index);
  ::plugins_childplugin* add_child();
  ::google::protobuf::RepeatedPtrField< ::plugins_childplugin >*
      mutable_child();
  const ::google::protobuf::RepeatedPtrField< ::plugins_childplugin >&
      child() const;

  // bytes name = 4;
  void clear_name();
  static const int kNameFieldNumber = 4;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const void* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // bytes path = 8;
  void clear_path();
  static const int kPathFieldNumber = 8;
  const ::std::string& path() const;
  void set_path(const ::std::string& value);
  #if LANG_CXX11
  void set_path(::std::string&& value);
  #endif
  void set_path(const char* value);
  void set_path(const void* value, size_t size);
  ::std::string* mutable_path();
  ::std::string* release_path();
  void set_allocated_path(::std::string* path);

  // bool isStart = 5;
  void clear_isstart();
  static const int kIsStartFieldNumber = 5;
  bool isstart() const;
  void set_isstart(bool value);

  // @@protoc_insertion_point(class_scope:plugins)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::plugins_childplugin > child_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::internal::ArenaStringPtr path_;
  bool isstart_;
  mutable int _cached_size_;
  friend struct ::protobuf_plugin_2eproto::TableStruct;
  friend void ::protobuf_plugin_2eproto::InitDefaultspluginsImpl();
};
// -------------------------------------------------------------------

class Allplugins : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Allplugins) */ {
 public:
  Allplugins();
  virtual ~Allplugins();

  Allplugins(const Allplugins& from);

  inline Allplugins& operator=(const Allplugins& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Allplugins(Allplugins&& from) noexcept
    : Allplugins() {
    *this = ::std::move(from);
  }

  inline Allplugins& operator=(Allplugins&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Allplugins& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Allplugins* internal_default_instance() {
    return reinterpret_cast<const Allplugins*>(
               &_Allplugins_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    2;

  void Swap(Allplugins* other);
  friend void swap(Allplugins& a, Allplugins& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Allplugins* New() const PROTOBUF_FINAL { return New(NULL); }

  Allplugins* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Allplugins& from);
  void MergeFrom(const Allplugins& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Allplugins* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .plugins plugin = 1;
  int plugin_size() const;
  void clear_plugin();
  static const int kPluginFieldNumber = 1;
  const ::plugins& plugin(int index) const;
  ::plugins* mutable_plugin(int index);
  ::plugins* add_plugin();
  ::google::protobuf::RepeatedPtrField< ::plugins >*
      mutable_plugin();
  const ::google::protobuf::RepeatedPtrField< ::plugins >&
      plugin() const;

  // @@protoc_insertion_point(class_scope:Allplugins)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::plugins > plugin_;
  mutable int _cached_size_;
  friend struct ::protobuf_plugin_2eproto::TableStruct;
  friend void ::protobuf_plugin_2eproto::InitDefaultsAllpluginsImpl();
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// plugins_childplugin

// bytes childname = 1;
inline void plugins_childplugin::clear_childname() {
  childname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& plugins_childplugin::childname() const {
  // @@protoc_insertion_point(field_get:plugins.childplugin.childname)
  return childname_.GetNoArena();
}
inline void plugins_childplugin::set_childname(const ::std::string& value) {
  
  childname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:plugins.childplugin.childname)
}
#if LANG_CXX11
inline void plugins_childplugin::set_childname(::std::string&& value) {
  
  childname_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:plugins.childplugin.childname)
}
#endif
inline void plugins_childplugin::set_childname(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  childname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:plugins.childplugin.childname)
}
inline void plugins_childplugin::set_childname(const void* value, size_t size) {
  
  childname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:plugins.childplugin.childname)
}
inline ::std::string* plugins_childplugin::mutable_childname() {
  
  // @@protoc_insertion_point(field_mutable:plugins.childplugin.childname)
  return childname_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* plugins_childplugin::release_childname() {
  // @@protoc_insertion_point(field_release:plugins.childplugin.childname)
  
  return childname_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void plugins_childplugin::set_allocated_childname(::std::string* childname) {
  if (childname != NULL) {
    
  } else {
    
  }
  childname_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), childname);
  // @@protoc_insertion_point(field_set_allocated:plugins.childplugin.childname)
}

// bytes location = 2;
inline void plugins_childplugin::clear_location() {
  location_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& plugins_childplugin::location() const {
  // @@protoc_insertion_point(field_get:plugins.childplugin.location)
  return location_.GetNoArena();
}
inline void plugins_childplugin::set_location(const ::std::string& value) {
  
  location_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:plugins.childplugin.location)
}
#if LANG_CXX11
inline void plugins_childplugin::set_location(::std::string&& value) {
  
  location_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:plugins.childplugin.location)
}
#endif
inline void plugins_childplugin::set_location(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  location_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:plugins.childplugin.location)
}
inline void plugins_childplugin::set_location(const void* value, size_t size) {
  
  location_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:plugins.childplugin.location)
}
inline ::std::string* plugins_childplugin::mutable_location() {
  
  // @@protoc_insertion_point(field_mutable:plugins.childplugin.location)
  return location_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* plugins_childplugin::release_location() {
  // @@protoc_insertion_point(field_release:plugins.childplugin.location)
  
  return location_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void plugins_childplugin::set_allocated_location(::std::string* location) {
  if (location != NULL) {
    
  } else {
    
  }
  location_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), location);
  // @@protoc_insertion_point(field_set_allocated:plugins.childplugin.location)
}

// bytes title = 3;
inline void plugins_childplugin::clear_title() {
  title_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& plugins_childplugin::title() const {
  // @@protoc_insertion_point(field_get:plugins.childplugin.title)
  return title_.GetNoArena();
}
inline void plugins_childplugin::set_title(const ::std::string& value) {
  
  title_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:plugins.childplugin.title)
}
#if LANG_CXX11
inline void plugins_childplugin::set_title(::std::string&& value) {
  
  title_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:plugins.childplugin.title)
}
#endif
inline void plugins_childplugin::set_title(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  title_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:plugins.childplugin.title)
}
inline void plugins_childplugin::set_title(const void* value, size_t size) {
  
  title_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:plugins.childplugin.title)
}
inline ::std::string* plugins_childplugin::mutable_title() {
  
  // @@protoc_insertion_point(field_mutable:plugins.childplugin.title)
  return title_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* plugins_childplugin::release_title() {
  // @@protoc_insertion_point(field_release:plugins.childplugin.title)
  
  return title_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void plugins_childplugin::set_allocated_title(::std::string* title) {
  if (title != NULL) {
    
  } else {
    
  }
  title_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), title);
  // @@protoc_insertion_point(field_set_allocated:plugins.childplugin.title)
}

// -------------------------------------------------------------------

// plugins

// bytes name = 4;
inline void plugins::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& plugins::name() const {
  // @@protoc_insertion_point(field_get:plugins.name)
  return name_.GetNoArena();
}
inline void plugins::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:plugins.name)
}
#if LANG_CXX11
inline void plugins::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:plugins.name)
}
#endif
inline void plugins::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:plugins.name)
}
inline void plugins::set_name(const void* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:plugins.name)
}
inline ::std::string* plugins::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:plugins.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* plugins::release_name() {
  // @@protoc_insertion_point(field_release:plugins.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void plugins::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:plugins.name)
}

// bool isStart = 5;
inline void plugins::clear_isstart() {
  isstart_ = false;
}
inline bool plugins::isstart() const {
  // @@protoc_insertion_point(field_get:plugins.isStart)
  return isstart_;
}
inline void plugins::set_isstart(bool value) {
  
  isstart_ = value;
  // @@protoc_insertion_point(field_set:plugins.isStart)
}

// bytes path = 8;
inline void plugins::clear_path() {
  path_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& plugins::path() const {
  // @@protoc_insertion_point(field_get:plugins.path)
  return path_.GetNoArena();
}
inline void plugins::set_path(const ::std::string& value) {
  
  path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:plugins.path)
}
#if LANG_CXX11
inline void plugins::set_path(::std::string&& value) {
  
  path_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:plugins.path)
}
#endif
inline void plugins::set_path(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:plugins.path)
}
inline void plugins::set_path(const void* value, size_t size) {
  
  path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:plugins.path)
}
inline ::std::string* plugins::mutable_path() {
  
  // @@protoc_insertion_point(field_mutable:plugins.path)
  return path_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* plugins::release_path() {
  // @@protoc_insertion_point(field_release:plugins.path)
  
  return path_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void plugins::set_allocated_path(::std::string* path) {
  if (path != NULL) {
    
  } else {
    
  }
  path_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), path);
  // @@protoc_insertion_point(field_set_allocated:plugins.path)
}

// repeated .plugins.childplugin child = 9;
inline int plugins::child_size() const {
  return child_.size();
}
inline void plugins::clear_child() {
  child_.Clear();
}
inline const ::plugins_childplugin& plugins::child(int index) const {
  // @@protoc_insertion_point(field_get:plugins.child)
  return child_.Get(index);
}
inline ::plugins_childplugin* plugins::mutable_child(int index) {
  // @@protoc_insertion_point(field_mutable:plugins.child)
  return child_.Mutable(index);
}
inline ::plugins_childplugin* plugins::add_child() {
  // @@protoc_insertion_point(field_add:plugins.child)
  return child_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::plugins_childplugin >*
plugins::mutable_child() {
  // @@protoc_insertion_point(field_mutable_list:plugins.child)
  return &child_;
}
inline const ::google::protobuf::RepeatedPtrField< ::plugins_childplugin >&
plugins::child() const {
  // @@protoc_insertion_point(field_list:plugins.child)
  return child_;
}

// -------------------------------------------------------------------

// Allplugins

// repeated .plugins plugin = 1;
inline int Allplugins::plugin_size() const {
  return plugin_.size();
}
inline void Allplugins::clear_plugin() {
  plugin_.Clear();
}
inline const ::plugins& Allplugins::plugin(int index) const {
  // @@protoc_insertion_point(field_get:Allplugins.plugin)
  return plugin_.Get(index);
}
inline ::plugins* Allplugins::mutable_plugin(int index) {
  // @@protoc_insertion_point(field_mutable:Allplugins.plugin)
  return plugin_.Mutable(index);
}
inline ::plugins* Allplugins::add_plugin() {
  // @@protoc_insertion_point(field_add:Allplugins.plugin)
  return plugin_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::plugins >*
Allplugins::mutable_plugin() {
  // @@protoc_insertion_point(field_mutable_list:Allplugins.plugin)
  return &plugin_;
}
inline const ::google::protobuf::RepeatedPtrField< ::plugins >&
Allplugins::plugin() const {
  // @@protoc_insertion_point(field_list:Allplugins.plugin)
  return plugin_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_plugin_2eproto__INCLUDED
